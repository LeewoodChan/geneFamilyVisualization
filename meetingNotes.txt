20160830 Meeting
-----------------------------------------------------------------------------
Background & Motivation:
---------------------------------
Alpha-fetoproteinRelatedGeneARGANewMemberOfTheAlbuminGeneFamilyThatIsNoLongerFunctionalInPrimates.pdf
EvolutionaryAnalysisOfTheMammalianM1AminopeptidasesRevealsConservedExonStructureAndGeneDeath.pdf
Research Statement

Tasks / Timelines:
---------------------------------
Understand the processing pipeline
Develop test cases based on FirstSTEP project results
Add documentation [comments] to the existing code
Modularize the code
Install necessary packages to run the code

Basic Layout:
+ If there's no exon for 1+ genes, move the exon box down
+ Boxes with the same gene should never overlap (push everything to the right)
+ "When the lines cross over, things can get visually messy, is it possible to maybe make the exon blocks slightly bigger, the colored lines thicker, and put more visual space between each of the lines? If you had thicker lines, and more negative space, I think it would be easier to keep track of them."
+ Make sure the output/image works for web, scientific articles and poster-sized paper
+ Verify supporting browsers / OSes
+ More sure "lines should never touch exons that aren't matching"
+ Additional output formats (so that the "output file be something editable by the authors")
+ Calculated pairwise similarities and determine the layout based on either the most similar first or last

Interactive:
+ Tooltip for boxes: Gene name and exon # (e.g., gene ABC123, exon 3; gene XYZ789, exon 7)
+ Color the exon sizes in the boxes the same color as the gene it's referencing
+ Show % sequence identity shared among two gene exons along with shared exon lengths
+ Verify supporting browsers / OSes
+ Add interactive option to display the alignment for each exon
+ Select which genes to include


20160915 Team Meeting
-----------------------------------------------------------------------------

Meeting Agenda:
---------------------------------
Demo of working dataParsing.cgi
+ Debugging options
+ Provide necessary files (via github [in the examples directory])

To-Dos:
-----------
Test cases / examples
+ Reformat FirstSTEP 2014's files for input to dataParsing.cgi (Dr. C)
+ Look at FirstSTEP 2014's files

Fix / Rewrite backend code
+ Expand dataParsing.cgi to work with command-line arguments [Ethan]
  import os
  if 'GATEWAY_INTERFACE' in os.environ:
      fileItems = form['filename[]']
  else:
      fileItems = sys.argv
+ Get a SIMPLE python cgi script to produce a SIMPLE webpage (moot point)
  * Apply to dataParsing.cgi (done!)
  
If you're sending a question to Dr. C via slack.com, then either 1) send it directly to him or 2) use @channel [which will include everyone] (so that Dr. C will get an email)

Reporting protocols
+ Email by Thursday 11:00 AM with:
  * Progress for the week
  * Roadblocks
  * Plans for the next week
  * Hours worked


20160926
-----------------------------------------------------------------------------
Dr. Seipelt-Thiemann's sequences (added to github repository):

Protein		Nucleotide #	Amino Acid #	GI #
-------------------------------------------------------
APN / ANPEP	NM_001150.2	NP_001141.2	GI: 157266299
APO	NM_001193331.2	NP_001180260.1	GI:308387394
APQ / Laev	NM_173800.4	NP_776161.3	GI: 194239712
ENPEP	NM_001977.3	NP_001968.3	GI: 132814466
ERAP1	NM_016442.3	NP_057526.3	GI: 94818900
ERAP2	NM_022350.3	NP_071745.1	GI: 194306627
LNPEP	NM_005575.2	NP_005566.2	GI: 61742776
LTA4H	NM_000895.2	NP_000886.1	GI: 375331875
NPEPPS	NM_006310.3	NP_006301.3	GI: 158937235
RNPEP	NM_020216.3	NP_064601.3	GI: 40316914
RNPEPL1	NM_018226.4	NP_060696.4	GI: 318065088
TRHDE	NM_013381.2	NP_037513.1	GI: 218751879



20160929
-----------------------------------------------------------------------------
Next Week To-Dos:
---------------------------------
Reese: Continue understanding the code and commenting it
Ethan: Familiarize with git
Leewood: Get command-line version working

python3 dataParsing.cgi examples/drSeipeltThiemann/*.txt  > output.html 2> errs.txt


20161013
-----------------------------------------------------------------------------

Agenda:
---------------------------------
Status reports (see also last meeting's to-dos)
+ Ethan reported about using <div>s instead of .svg files
Git tutorial
+ Working model
  * Create newFile.txt
  * git add newFile.txt  # adds newFile.txt to your staging area
  * git commit -m "message"  # updates newFile.txt in your local repository
  * git pull  # get updates from the remote repository
    - Handle any conflicts
  * git push   # share the updates from your local repository to the remote repository


20161020
-----------------------------------------------------------------------------

Agenda:
---------------------------------
Status reports (see also last meeting's to-dos)
+ Leewood: Q: Command-line args ready to merge into master branch? A: Yes

Added Tasks / Timelines in 20160830 entry above
+ Need to add: Remove "pseudo linear" (additional) horizontal spacing

To-dos:
+ Ethan: Make simple .svg file with a mouseover windows with links in the window
+ Leewood: Merge addArg branch into master branch & changing the STDOUT to be the html (instead of writing it to a file)
+ Reese: Commenting code and modulating the code


20161027
-----------------------------------------------------------------------------
Agenda:
---------------------------------
Status reports (see also last meeting's to-dos)

To-dos:
+ Ethan: 
+ Leewood: 
+ Reese: 


20161110
-----------------------------------------------------------------------------
Agenda:
---------------------------------
Dr. Carroll: Summary of call with Dr. Seipelt-Thiemann:
  Exons can have lowercase and uppercase nucleotides in them.  Lowercase nucleotides are part of the untranslated region (UTR).   Dr. Seipelt-Thiemann colored the circles grey for the exons with ONLY untranslated nucleotides.  With an exon has some UTR, then don't align it to other exons.
  Additionally, exons that do share the same reading frame (and start within n residues of each other), but do not have significant (biologically meaniful) similarity, should not be visually represented in the same exon shape.
  Exon boundaries are at most 9-12 nucleotides within each other


he visualizer interface needs to know the exon
addNode(exon_id, MSA_column, readingFrame {0-3}, node_color = None )
addGeneFamily( name, list of exon_ids)


json: 3D array;
1st index:
1) 2D array of exon properties:
   Foreach exon, list it's (visual exon) id, MSA_column, readingFrame {0-2}, node_color = None
2) 2D ragged array:
   Foreach gene, it's name and list of exon_ids

20161115
-----------------------------------------------------------------------------
Agenda:
---------------------------------
Status of hours?

Status reports:
-----------
Reece:   Flowchart
Ethan:   3D json array version of Dr. Seipelt-Thiemann's example
         + Can it work with ragged arrays? A: Yes
         + Just 2 genes
         + All genes
Micah:   Visualizer updates (to accept 3D array)
         + Can it work with ragged arrays?: A: Yes
Leewood: 

Future: Add MSA coordinates to json data (from parser to visualization)

To-Dos:
-----------
Reece:   Flowchart
         Email hours
Ethan:   Research end of URECA award
         Email hours
         3D array version of Dr. Seipelt-Thiemann's example
         + Just 2 genes
         + Deposit json output into Dr. Seipelt-Thiemann's example directory
Dr. C:   Format Dr. Seipelt-Thiemann's MSA
Micah:   Visualize strictly from json data
         Add legend
Leewood: 


Next meeting: Thursday, 2:00 PM


20161123 Sub-meeting with Reese & Dr. C
-----------------------------------------------------------------------------
parser -> visualizer interface:
json: dictionary of two items:
1) 2D array of exon properties:
   1st index: (visual exon) id
   2nd indices: visual column start index, visual column end index, readingFrame {0-2}, node_color = None
2) dictionary:
   keys: gene names
   values: list of visual exon ids

Parser:
-----------

Process ORF locations from "left-to-right", so that the visual column numbers can easily be determined
For each gene, keep track of the current gene_exon_id and it's starting visual_column_index
To determine which gene_exons should be combined into a single visual_exon, look for the same reading frame,
Somewhere in here, we need a test of something like < 50% (or some other threshold) of gaps for a given visual_column

List of alignment indices for each visual column:
  1st index: visual column index
  values: alignment index (of first exon in the respective visual column)
  
List of visual exons and their info:
  1st index: visual column index
  2nd index: visual exon id
  values: readingFrame {0-2}
  
Dictionary of visual exon colors (if set):
  keys: visual exon ids
  values: node_color
  
Dictionary of exon id list for each gene:
  keys: gene name
  values: list of visual exon ids


20161129
-----------------------------------------------------------------------------
Make a list of gene exon indices (1st index: genes), to keep track of the current gene_exon_id
Make a list of starting visual_column_indices (1st index: genes)
Process exon boundaries (ORF locations) from "left-to-right" (so that the visual column indices can easily be determined)
Exons with a boundary within 10 AA (make it a variable) of the leftmost exon boundary are in the same visual column
+ For those genes that are being "stretched", verify that they have <= 50% (make a variable) gaps (if they don't, increment their starting visual column index)
Combine genes with identical reading frames together in the same visual exon, if they have the same starting visual column index


20161201 Team Meeting
-----------------------------------------------------------------------------

Agenda:
---------------------------------

Status reports:
-----------
Dr. C:   Format Dr. Seipelt-Thiemann's MSA
         New json data format for parser to visualizer stage
Reece:   Flowchart, commenting, re-factoring
Ethan:   Research end of URECA award (12/8/16?)
         3D json array version of Dr. Seipelt-Thiemann's example
         + Just two genes
         + Deposit json outputs (1: all genes, 2: two genes) into Dr. Seipelt-Thiemann's example directory
Micah:   Visualize strictly from json data
         Add legend
Leewood: 

Future: Add MSA coordinates to json data (from parser to visualization)
Next meeting: Thursday, December 8, 2016, 1:30 PM

parser -> visualizer interface:
json: dictionary of two items:
1) 2D array of exon properties:
   1st index: (visual exon) id
   2nd indices: visual column start index, visual column end index, readingFrame {0-2}, node_color = None
2) dictionary:
   keys: gene names
   values: list of visual exon ids (future: make it a tuple of visual exon id, start alignment position, end alignment position)

To-Dos:
-----------
Dr. C:   Format Dr. Seipelt-Thiemann's MSA
Reece:   Flowchart of algorithm to determine which exons map to which visual exons
         URECA report
Ethan:   Deposit json output files to repository (1: all genes, 2: two genes) in the Dr. Seipelt-Thiemann's example directory
         URECA report
Micah:   Add legend
         Email URLs to Dr. C
         Incorporate visual exon spanning multiple visual columns
Leewood: -afa command-line argument (and by-passing clustal omega execution)


20161208
-----------------------------------------------------------------------------

Review of old and new visualizations (with Dr. Seipelt-Thiemann):
-----------
Dr. Seipelt-Thiemann likes that in the new version she is able to see the colors better (thereby reducing the need to have larger nodes sizes)
Tooltips for the nodes should have: gene names, exons #s (relative to each gene), # base pairs (length of each exon), view of MSA (multiple sequence alignment)
Legend: with highlighting of lines & visual exon nodes would be nice
Each visual exon node should display the length(s) of all of it's exons
Micah, In the new version, the edge from exon 11 to exon 15 should really be to exon 14, right?

Status reports:
-----------
Dr. C:   Format Dr. Seipelt-Thiemann's MSA (added git repository as examples/drSeipeltThiemann/drSeipeltAlignment.afa)
Leewood: -afa command-line argument (and by-passing clustal omega execution)

To-Dos:
-----------
Dr. C:   Merge dataParsing.cgi and dataParsing.py (done: merged into geneFamilyVis.cgi)
Leewood: If a user specified an alignment on the command-line, then for each
         value in the gene_dic, verify that the AA_len and Aligned_str data
	 members have the same characters (except that Aligned_str can have
	 gaps, "-"s)
Micah:   Add legend
         Email URLs to Dr. C
         Incorporate visual exon spanning multiple visual columns
Reece:   Flowchart of algorithm to determine which exons map to which visual exons
